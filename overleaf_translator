#!/usr/bin/env python3

import json
import struct
import sys
import traceback

from hltex.errors import TranslationError
from hltex.newtranslator import parse_block
from hltex.state import State

while 1:
    # The first four bytes from the app state the rest of the message's length.
    text_length_bytes = sys.stdin.buffer.read(4)
    # sys.stderr.write(str(type(text_length_bytes)))

    # Unpack the exact length of the message from the app, and read the message.
    text_length = struct.unpack("i", text_length_bytes)[0]

    request = sys.stdin.buffer.read(text_length)
    request = json.loads(request.decode("utf-8"))
    document = request["doc"]["text"]
    file_env = request["file_env"]
    sys.stderr.write("Document: " + document + "\n")
    sys.stderr.write("File env: " + str(file_env) + "\n")

    file_dict = {}
    for f in file_env:
        file_dict[f["path"]] = f["text"]

    try:
        state = State(document, file_env=file_dict)
        output = parse_block(state, preamble=True)
        res = {"text": output, "error": None, "line": None, "files": []}
        sys.stderr.write("Translator result: " + str(res))
    except TranslationError as e:
        res = {
            "text": None,
            "error": type(e).__name__ + ": " + e.msg,
            "line": state.get_line(),
            "files": [],
        }
    except Exception as e:
        traceback.print_exc()
        res = {
            "text": None,
            "error": "Internal compiler error",
            "line": state.get_line(),
            "files": [],
        }

    # The text to send back to the app.
    text = json.dumps(res)

    # Tell the app how long your message is.
    sys.stdout.buffer.write(struct.pack("I", len(text)))

    # Send the message.
    sys.stdout.write(text)
    sys.stdout.flush()
